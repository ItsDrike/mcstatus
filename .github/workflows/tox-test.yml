name: Tox test

on: [pull_request, push]

env:
  # Make sure pip caches dependencies and installs as user
  PIP_NO_CACHE_DIR: false
  PIP_USER: 1

  # Make sure poetry won't use virtual environments
  POETRY_VIRTUALENVS_CREATE: false

  # Specify paths here, so we know exactly where things are for caching
  PYTHONUSERBASE: ${{ github.workspace }}/.cache/py-user-base
  POETRY_CACHE_DIR: ${{ github.workspace }}/.cache/py-user-base
  TOXDIR: ${{ github.workspace }}/.tox

jobs:
  tox-test:
    runs-on: ${{ matrix.platform }}

    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Python setup
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Cache python dependencies so that unless we change them,
      # we won't need to reinstall them with each workflow run.
      # The key is a composite of multiple values, which when changed
      # the cache won't be restored in order to make updating possible
      - name: Python dependency caching
        uses: actions/cache@v2
        id: python_cache
        with:
          path: |
            ${{ env.PYTHONUSERBASE }}
            ${{ env.TOXDIR }}
          key: "python-0-${{ runner.os }}-${{ env.PYTHONUSERBASE }}-\
                ${{ env.TOXDIR }}-${{ steps.python.outputs.python-version }}-\
                ${{ hashFiles('./pyproject.toml', './poetry.lock') }}"

      # In case the dependencies weren't restored, install them
      - name: Install dependencies using poetry
        if: steps.python_cache.outputs.cache-hit != 'true'
        run: |
          pip install poetry
          pip install tox
          pip install tox-poetry
          pip install tox-gh-actions

      - name: Test with tox
        run: python -m tox
        env:
          PIP_USER: 0  # We want tox to use it's environments, not user installs

      # Steps below are here to generate and upload an artifact from
      # this workflow so that we can have the data about author and some
      # other things accessible from the status_embed workflow.

      # Prepare the pull request payload artifact. If this fails, we
      # fail silently using the `continue-on-error` option, since failure
      # doesn't mean that the checks in this workflow have failed.
      - name: Prepare Pull Request Payload artifact
        id: prepare-artifact
        if: always() && github.event_name == 'pull_request'
        continue-on-error: true
        run: cat $GITHUB_EVENT_PATH | jq '.pull_request' > pull_request_payload.json

      # This only makes sense if the previous step succeeded. To
      # get the original outcome of the previous step before the
      # `continue-on-error` conclusion is applied, we use the
      # `.outcome` value. This step also fails silently.
      - name: Upload a Build Artifact
        if: always() && steps.prepare-artifact.outcome == 'success'
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          name: pull-request-payload
          path: pull_request_payload.json
